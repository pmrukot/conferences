-- MySQL Script generated by MySQL Workbench
-- czw, 21 sty 2016, 11:05:27
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema conferences
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema conferences
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `conferences` DEFAULT CHARACTER SET utf8 ;
USE `conferences` ;

-- -----------------------------------------------------
-- Table `conferences`.`companies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`companies` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `NIP` VARCHAR(9) NULL DEFAULT NULL,
  `city` VARCHAR(120) NOT NULL,
  `phone` VARCHAR(20) NOT NULL,
  `country` VARCHAR(2) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `NIP_UNIQUE` (`NIP` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 61
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`conferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`conferences` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `start_date` DATETIME NOT NULL,
  `end_date` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `name_index` (`name` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 73
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`conference_days`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`conference_days` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `conference_id` INT(11) NOT NULL,
  `day` DATE NOT NULL,
  `participants_limit` INT(11) NULL DEFAULT NULL,
  `is_canceled` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  INDEX `fk_conferences_idx` (`conference_id` ASC),
  CONSTRAINT `fk_conferences`
    FOREIGN KEY (`conference_id`)
    REFERENCES `conferences`.`conferences` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 159
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`companies_bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`companies_bookings` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `company_id` INT(11) NOT NULL,
  `conference_day_id` INT(11) NOT NULL,
  `students_count` INT(11) NOT NULL,
  `non_students_count` INT(11) NOT NULL DEFAULT '0',
  `created` DATETIME NULL DEFAULT NULL,
  `modified` DATETIME NULL DEFAULT NULL,
  `total` DECIMAL(10,0) NOT NULL,
  `is_canceled` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  INDEX `fk_conference_days_idx` (`conference_day_id` ASC),
  INDEX `fk_companies_1` (`company_id` ASC),
  CONSTRAINT `fk_companies_1`
    FOREIGN KEY (`company_id`)
    REFERENCES `conferences`.`companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_conference_days`
    FOREIGN KEY (`conference_day_id`)
    REFERENCES `conferences`.`conference_days` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1911
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`workshops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`workshops` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `conference_day_id` INT(11) NOT NULL,
  `price` DECIMAL(10,0) NOT NULL,
  `participants_limit` INT(11) NULL DEFAULT NULL,
  `start` TIME NOT NULL,
  `end` TIME NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_conferences_idx` (`conference_day_id` ASC),
  CONSTRAINT `fk_conferences_3`
    FOREIGN KEY (`conference_day_id`)
    REFERENCES `conferences`.`conference_days` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 619
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`companies_workshop_bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`companies_workshop_bookings` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `booking_id` INT(11) NOT NULL,
  `workshop_id` INT(11) NOT NULL,
  `attenders_count` INT(11) NOT NULL,
  `created` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `unique_booking` (`booking_id` ASC, `workshop_id` ASC),
  INDEX `companies_bookings_fk_idx` (`booking_id` ASC),
  INDEX `workshops_fk_idx` (`workshop_id` ASC),
  CONSTRAINT `companies_bookings_fk`
    FOREIGN KEY (`booking_id`)
    REFERENCES `conferences`.`companies_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `workshops_fk`
    FOREIGN KEY (`workshop_id`)
    REFERENCES `conferences`.`workshops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2460
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`company_attenders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`company_attenders` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(120) NOT NULL,
  `last_name` VARCHAR(120) NOT NULL,
  `company_id` INT(11) NULL DEFAULT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `student_card_number` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_companies_idx` (`company_id` ASC),
  INDEX `email_index` (`email` ASC),
  CONSTRAINT `fk_companies`
    FOREIGN KEY (`company_id`)
    REFERENCES `conferences`.`companies` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 21834
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`company_booking_lists`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`company_booking_lists` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `attender_id` INT(11) NOT NULL,
  `booking_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_company_attenders_idx` (`attender_id` ASC),
  INDEX `fk_companies_bookings_idx` (`booking_id` ASC),
  CONSTRAINT `fk_company_attenders`
    FOREIGN KEY (`attender_id`)
    REFERENCES `conferences`.`company_attenders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_companies_bookings`
    FOREIGN KEY (`booking_id`)
    REFERENCES `conferences`.`companies_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 19057
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`company_booking_payins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`company_booking_payins` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `amount` DECIMAL(10,0) NOT NULL,
  `datetime` DATETIME NOT NULL,
  `booking_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `company_booking_id_idx` (`booking_id` ASC),
  CONSTRAINT `company_booking_id`
    FOREIGN KEY (`booking_id`)
    REFERENCES `conferences`.`companies_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 4541
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`people`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`people` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(120) NOT NULL,
  `last_name` VARCHAR(120) NOT NULL,
  `PESEL` VARCHAR(11) NULL DEFAULT NULL,
  `city` VARCHAR(120) NOT NULL,
  `country` VARCHAR(2) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `phone` VARCHAR(20) NOT NULL,
  `student_card_number` VARCHAR(10) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `PESEL_UNIQUE` (`PESEL` ASC),
  INDEX `index` (`email` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 1541
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`people_bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`people_bookings` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `person_id` INT(11) NOT NULL,
  `conference_day_id` INT(11) NOT NULL,
  `price` DECIMAL(10,0) NOT NULL,
  `is_canceled` TINYINT(1) NOT NULL DEFAULT '0',
  `due_date` DATETIME NOT NULL,
  `created` DATETIME NULL DEFAULT NULL,
  `modified` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_people_1_idx` (`person_id` ASC),
  INDEX `fk_conferences_2_idx` (`conference_day_id` ASC),
  CONSTRAINT `fk_people_1`
    FOREIGN KEY (`person_id`)
    REFERENCES `conferences`.`people` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_conferences_2`
    FOREIGN KEY (`conference_day_id`)
    REFERENCES `conferences`.`conference_days` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 13033
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`people_booking_payins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`people_booking_payins` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `amount` DECIMAL(10,0) NOT NULL,
  `datetime` DATETIME NOT NULL,
  `booking_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `people_booking_fk_idx` (`booking_id` ASC),
  CONSTRAINT `people_booking_fk`
    FOREIGN KEY (`booking_id`)
    REFERENCES `conferences`.`people_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 30549
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`price_levels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`price_levels` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `price` DECIMAL(10,0) NOT NULL,
  `start_date` DATE NOT NULL,
  `end_date` DATE NOT NULL,
  `conference_id` INT(11) NOT NULL,
  `student_discount` DECIMAL(10,0) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  INDEX `conferences_fk_idx` (`conference_id` ASC),
  CONSTRAINT `conferences_fk`
    FOREIGN KEY (`conference_id`)
    REFERENCES `conferences`.`conferences` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 1053
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`workshop_people`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`workshop_people` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `person_id` INT(11) NOT NULL,
  `workshop_id` INT(11) NOT NULL,
  `booking_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_people_idx` (`person_id` ASC),
  INDEX `fk_bookings_idx` (`booking_id` ASC),
  INDEX `fk_workshops_idx` (`workshop_id` ASC),
  CONSTRAINT `fk_people`
    FOREIGN KEY (`person_id`)
    REFERENCES `conferences`.`people` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_workshops`
    FOREIGN KEY (`workshop_id`)
    REFERENCES `conferences`.`workshops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_bookings`
    FOREIGN KEY (`booking_id`)
    REFERENCES `conferences`.`people_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 809
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conferences`.`workshops_company_attenders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`workshops_company_attenders` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `workshop_id` INT(11) NOT NULL,
  `attender_id` INT(11) NOT NULL,
  `workshop_booking_id` INT(11) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_workshops_idx` (`workshop_id` ASC),
  INDEX `fk_company_attenders_idx` (`attender_id` ASC),
  INDEX `fk_bookings_idx` (`workshop_booking_id` ASC),
  CONSTRAINT `fk_company_attenders_1`
    FOREIGN KEY (`attender_id`)
    REFERENCES `conferences`.`company_attenders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_workshops_attenders_1`
    FOREIGN KEY (`workshop_id`)
    REFERENCES `conferences`.`workshops` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_bookings_attenders_1`
    FOREIGN KEY (`workshop_booking_id`)
    REFERENCES `conferences`.`companies_workshop_bookings` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2460
DEFAULT CHARACTER SET = utf8;

USE `conferences` ;

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`cancelled_companies_bookings_employees_personal_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`cancelled_companies_bookings_employees_personal_data` (`name` INT, `first_name` INT, `last_name` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`conferences_pricing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`conferences_pricing` (`price` INT, `student_discount` INT, `start_date` INT, `end_date` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`free_workshops`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`free_workshops` (`name` INT, `day` INT, `start` INT, `end` INT, `length` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`most_popular_conferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`most_popular_conferences` (`total_participants` INT, `name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`students_personal_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`students_personal_data` (`first_name` INT, `last_name` INT, `student_card_number` INT, `email` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`top_donators`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`top_donators` (`total_paid` INT, `person` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`workshops_pricing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`workshops_pricing` (`name` INT, `day` INT, `start` INT, `end` INT, `cost` INT, `length` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`conferences_limit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`conferences_limit` (`name` INT, `total_participant_limit` INT, `total_participants` INT);

-- -----------------------------------------------------
-- Placeholder table for view `conferences`.`workshop_limits`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conferences`.`workshop_limits` (`participants_limit` INT, `name` INT, `sum` INT);

-- -----------------------------------------------------
-- procedure add_company_booking_workshop
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_company_booking_workshop` (IN workshop_id INT(11), IN booking_id INT(11), IN attenders_count INT(11))
BEGIN
	declare time_now DATETIME;
    set time_now = NOW();
	insert into companies_workshop_bookings (booking_id, workshop_id, attenders_count, created) values (booking_id, workshop_id, attenders_count, time_now);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_person_booking_workshop
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_person_booking_workshop` (IN person_id INT(11), IN workshop_id INT(11),
										IN booking_id INT(11))
BEGIN
	insert into workshop_people (person_id, workshop_id, booking_id) values (person_id, workshop_id, booking_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_person_booking_payin
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_person_booking_payin` (IN amount DECIMAL(10,0), IN datetime DATETIME,
										IN booking_id INT(11))
BEGIN
	insert into people_booking_payins (amount, datetime, booking_id) values (amount, datetime, booking_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_company_booking_payin
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_company_booking_payin` (IN amount DECIMAL(10,0), IN booking_id INT(11))

BEGIN
	declare time_now DATETIME;
    set time_now = NOW();
	insert into company_booking_payins (amount, datetime, booking_id) values (amount, time_now, booking_id);
    update companies_bookings
    set total = total + amount
    where companies_bookings.id = booking_id;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cancel_conference
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `cancel_conference` (IN id INT(11))
BEGIN
	update conference_days
    set is_canceled = 1
    where conference_id = id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure enroll_person_for_conference_day
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `enroll_person_for_conference_day`(
	IN conference_day_id INT,
    IN person_id INT,
    IN enrollment_date DATE
)
BEGIN

    DECLARE PRICE DECIMAL;
    DECLARE STUDENT_DISCOUNT INT;
    DECLARE STUDENT_CARD_NUMBER VARCHAR(10);

    SET STUDENT_CARD_NUMBER = (SELECT p.student_card_number FROM people AS p WHERE p.id = person_id);
    SET PRICE = (SELECT pl.price FROM price_levels AS pl 
                 JOIN conferences AS c ON c.id = pl.conference_id
                 JOIN conference_days AS cd ON cd.conference_id = c.id
                 WHERE enrollment_date >= pl.start_date 
                 AND enrollment_date <= pl.end_date
                 AND cd.id = conference_day_id);

    SET STUDENT_DISCOUNT = (SELECT pl.student_discount FROM price_levels AS pl 
                            JOIN conferences AS c ON c.id = pl.conference_id
                            JOIN conference_days AS cd ON cd.conference_id = c.id
                            WHERE enrollment_date >= pl.start_date 
                            AND enrollment_date <= pl.end_date
                            AND cd.id = conference_day_id);

	IF STUDENT_CARD_NUMBER IS NOT NULL THEN
		SET PRICE = PRICE * (1 - STUDENT_DISCOUNT/100);
	END IF;
        
	INSERT INTO people_bookings (
		person_id,
		conference_day_id,
		price,
		is_canceled,
		due_date,
		created
	) VALUES (
		person_id,
		conference_day_id,
		PRICE,
		FALSE,
		DATE_ADD(NOW(), INTERVAL 1 WEEK),
		NOW()
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_person
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_person` (IN first_name varchar(120), IN last_name varchar(120),
IN pesel varchar(11), IN city varchar(120), IN country varchar(2), IN email varchar(255),
IN password varchar(255), IN phone varchar(20), IN student_card_number varchar(10))
BEGIN
	insert into people (first_name, last_name, pesel, city, country, email, password, phone, student_card_number) 
    values (first_name, last_name, pesel, city, country, email, password, phone, student_card_number);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_company_attender
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_company_attender` (IN first_name varchar(120), IN last_name varchar(120),
IN company_id INT(11), IN email varchar(255), IN password varchar(255), IN student_card_number varchar(10))
BEGIN
	insert into company_attenders (first_name, last_name, company_id, email, password, student_card_number)
    values (first_name, last_name, company_id, email, password, student_card_number);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_conference
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_conference` (IN name varchar(255), IN start_date DATETIME, IN end_date DATETIME)
BEGIN
	insert into conferences (name, start_date, end_date)
    values (name, start_date, end_date);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_workshop
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_workshop` (IN conference_day_id INT(11), IN price DECIMAL, IN participants_limit INT, IN start TIME, IN end TIME)
BEGIN
	insert into workshops (conference_day_id, price, participants_limit, start, end)
    values (conference_day_id, price, participants_limit, start, end);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_conference_day
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_conference_day` (IN conference_id INT, IN day DATE, IN participants_limit INT)
BEGIN
	insert into conference_days (conference_id, day, participants_limit)
    values (conference_id, day, participants_limit);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_price_level
-- -----------------------------------------------------

DELIMITER $$
USE `conferences`$$
CREATE PROCEDURE `add_price_level` (IN price DECIMAL, IN start_date DATE, IN end_date DATE, IN conference_id INT, IN student_discount DECIMAL)
BEGIN
	insert into price_levels (price, start_date, end_date, conference_id, student_discount)
    values (price, start_date, end_date, conference_id, student_discount);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `conferences`.`cancelled_companies_bookings_employees_personal_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`cancelled_companies_bookings_employees_personal_data`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`cancelled_companies_bookings_employees_personal_data` AS select `c`.`name` AS `name`,`ca`.`first_name` AS `first_name`,`ca`.`last_name` AS `last_name`,`ca`.`email` AS `email` from (((((`conferences`.`conferences` `c` join `conferences`.`conference_days` `cd` on((`cd`.`conference_id` = `c`.`id`))) join `conferences`.`companies_bookings` `cb` on((`cb`.`conference_day_id` = `cd`.`id`))) join `conferences`.`company_booking_lists` `cbl` on((`cbl`.`booking_id` = `cb`.`id`))) join `conferences`.`company_attenders` `ca` on((`ca`.`id` = `cbl`.`attender_id`))) join `conferences`.`companies` `cmp` on((`ca`.`company_id` = `cmp`.`id`))) where (`cb`.`is_canceled` = 1) group by `ca`.`first_name`,`ca`.`last_name` order by `ca`.`last_name`,`ca`.`first_name`;

-- -----------------------------------------------------
-- View `conferences`.`conferences_pricing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`conferences_pricing`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`conferences_pricing` AS select `conferences`.`price_levels`.`price` AS `price`,`conferences`.`price_levels`.`student_discount` AS `student_discount`,`conferences`.`price_levels`.`start_date` AS `start_date`,`conferences`.`price_levels`.`end_date` AS `end_date`,`conferences`.`conferences`.`name` AS `name` from (`conferences`.`price_levels` join `conferences`.`conferences` on((`conferences`.`conferences`.`id` = `conferences`.`price_levels`.`conference_id`))) order by `conferences`.`conferences`.`name`;

-- -----------------------------------------------------
-- View `conferences`.`free_workshops`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`free_workshops`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`free_workshops` AS select `conferences`.`conferences`.`name` AS `name`,`conferences`.`conference_days`.`day` AS `day`,`conferences`.`workshops`.`start` AS `start`,`conferences`.`workshops`.`end` AS `end`,concat(cast((hour(`conferences`.`workshops`.`end`) - hour(`conferences`.`workshops`.`start`)) as char(50) charset utf8),'h') AS `length` from ((`conferences`.`workshops` join `conferences`.`conference_days` on((`conferences`.`conference_days`.`id` = `conferences`.`workshops`.`conference_day_id`))) join `conferences`.`conferences` on((`conferences`.`conferences`.`id` = `conferences`.`conference_days`.`conference_id`))) where (`conferences`.`workshops`.`price` = 0) order by `conferences`.`conferences`.`name`,`conferences`.`conference_days`.`day`,`conferences`.`workshops`.`start`;

-- -----------------------------------------------------
-- View `conferences`.`most_popular_conferences`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`most_popular_conferences`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`most_popular_conferences` AS select (sum((`cb`.`students_count` + `cb`.`non_students_count`)) + count(`pb`.`person_id`)) AS `total_participants`,`c`.`name` AS `name` from (((`conferences`.`companies_bookings` `cb` join `conferences`.`conference_days` `cd` on((`cd`.`id` = `cb`.`conference_day_id`))) join `conferences`.`conferences` `c` on((`c`.`id` = `cd`.`conference_id`))) join `conferences`.`people_bookings` `pb` on((`pb`.`conference_day_id` = `cd`.`id`))) group by `c`.`name` order by (sum((`cb`.`students_count` + `cb`.`non_students_count`)) + count(`pb`.`person_id`)) desc limit 10;

-- -----------------------------------------------------
-- View `conferences`.`students_personal_data`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`students_personal_data`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`students_personal_data` AS select `conferences`.`company_attenders`.`first_name` AS `first_name`,`conferences`.`company_attenders`.`last_name` AS `last_name`,`conferences`.`company_attenders`.`student_card_number` AS `student_card_number`,`conferences`.`company_attenders`.`email` AS `email` from `conferences`.`company_attenders` where (`conferences`.`company_attenders`.`student_card_number` is not null) union select `conferences`.`people`.`first_name` AS `first_name`,`conferences`.`people`.`last_name` AS `last_name`,`conferences`.`people`.`student_card_number` AS `student_card_number`,`conferences`.`people`.`email` AS `email` from `conferences`.`people` where (`conferences`.`people`.`student_card_number` is not null);

-- -----------------------------------------------------
-- View `conferences`.`top_donators`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`top_donators`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`top_donators` AS select sum(`conferences`.`people_booking_payins`.`amount`) AS `total_paid`,concat(`conferences`.`people`.`first_name`,' ',`conferences`.`people`.`last_name`) AS `person` from ((`conferences`.`people_booking_payins` join `conferences`.`people_bookings` on((`conferences`.`people_bookings`.`id` = `conferences`.`people_booking_payins`.`booking_id`))) join `conferences`.`people` on((`conferences`.`people`.`id` = `conferences`.`people_bookings`.`person_id`))) group by `conferences`.`people_bookings`.`person_id` having (sum(`conferences`.`people_booking_payins`.`amount`) > 25000) order by sum(`conferences`.`people_booking_payins`.`amount`) desc;

-- -----------------------------------------------------
-- View `conferences`.`workshops_pricing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`workshops_pricing`;
USE `conferences`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `conferences`.`workshops_pricing` AS select `conferences`.`conferences`.`name` AS `name`,`conferences`.`conference_days`.`day` AS `day`,`conferences`.`workshops`.`start` AS `start`,`conferences`.`workshops`.`end` AS `end`,concat(cast(`conferences`.`workshops`.`price` as char(50) charset utf8),'PLN') AS `cost`,concat(cast((hour(`conferences`.`workshops`.`end`) - hour(`conferences`.`workshops`.`start`)) as char(50) charset utf8),'h') AS `length` from ((`conferences`.`workshops` join `conferences`.`conference_days` on((`conferences`.`conference_days`.`id` = `conferences`.`workshops`.`conference_day_id`))) join `conferences`.`conferences` on((`conferences`.`conferences`.`id` = `conferences`.`conference_days`.`conference_id`))) order by `conferences`.`conferences`.`name`,`conferences`.`conference_days`.`day`,`conferences`.`workshops`.`start`;

-- -----------------------------------------------------
-- View `conferences`.`conferences_limit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`conferences_limit`;
USE `conferences`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `conferences_limit` AS
    SELECT 
        `c`.`name` AS `name`,
        SUM(`cd`.`participants_limit`) AS `total_participant_limit`,
        SUM(((SELECT 
                COUNT(`pb`.`id`)
            FROM
                `people_bookings` `pb`
            WHERE
                ((`pb`.`conference_day_id` = `cd`.`id`)
                    AND (NOT (`pb`.`is_canceled`)))) + (SELECT 
                (SUM(`cb`.`students_count`) + SUM(`cb`.`non_students_count`))
            FROM
                `companies_bookings` `cb`
            WHERE
                (`cb`.`conference_day_id` = `cd`.`id`)
            GROUP BY `cb`.`conference_day_id`))) AS `total_participants`
    FROM
        (`conference_days` `cd`
        JOIN `conferences` `c` ON ((`cd`.`conference_id` = `c`.`id`)))
    GROUP BY `cd`.`participants_limit` , ((SELECT 
            COUNT(`pb`.`id`)
        FROM
            `people_bookings` `pb`
        WHERE
            ((`pb`.`conference_day_id` = `cd`.`id`)
                AND (NOT (`pb`.`is_canceled`)))) + (SELECT 
            (SUM(`cb`.`students_count`) + SUM(`cb`.`non_students_count`))
        FROM
            `companies_bookings` `cb`
        WHERE
            (`cb`.`conference_day_id` = `cd`.`id`)
        GROUP BY `cb`.`conference_day_id`));

-- -----------------------------------------------------
-- View `conferences`.`workshop_limits`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `conferences`.`workshop_limits`;
USE `conferences`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `workshop_limits` AS
    SELECT 
        `w`.`participants_limit` AS `participants_limit`,
        `c`.`name` AS `name`,
        ((SELECT 
                SUM(`cwb`.`attenders_count`)
            FROM
                (`companies_workshop_bookings` `cwb`
                JOIN `companies_bookings` `cb` ON ((`cb`.`id` = `cwb`.`booking_id`)))
            WHERE
                ((`cwb`.`workshop_id` = `w`.`id`)
                    AND (NOT (`cb`.`is_canceled`)))
            GROUP BY `cwb`.`workshop_id`) + (SELECT 
                COUNT(`wp`.`id`)
            FROM
                (`workshop_people` `wp`
                JOIN `people_bookings` `pb` ON ((`pb`.`id` = `wp`.`booking_id`)))
            WHERE
                ((`wp`.`workshop_id` = `w`.`id`)
                    AND (NOT (`pb`.`is_canceled`))))) AS `sum`
    FROM
        ((`workshops` `w`
        JOIN `conference_days` `cd` ON ((`cd`.`id` = `w`.`conference_day_id`)))
        JOIN `conferences` `c` ON ((`c`.`id` = `cd`.`conference_id`)))
    ORDER BY `w`.`participants_limit` DESC;
USE `conferences`;

DELIMITER $$
USE `conferences`$$
CREATE DEFINER = CURRENT_USER TRIGGER `conferences`.`companies_BEFORE_INSERT` BEFORE INSERT ON `companies` FOR EACH ROW
BEGIN
	IF email NOT LIKE '[a-zA-Z0-9_\-]+@([a-zA-Z0-9_\-]+\.)+(com|org|edu|nz|au)' THEN
		signal sqlstate '45000' set message_text = 'Wrong email pattern';
	END IF;
    IF phone NOT LIKE '[+](\d[-\s]?){6,11}\d' THEN
		signal sqlstate '45000' set message_text = 'Wrong phone pattern';
	END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`companies_bookings_BEFORE_INSERT`
BEFORE INSERT ON `conferences`.`companies_bookings`
FOR EACH ROW
BEGIN
	DECLARE COMPANY_BOOKINGS INT;
    DECLARE PEOPLE_BOOKINGS INT;
    DECLARE PARTICIPANTS_LIMIT INT;
                            
	SET COMPANY_BOOKINGS = (SELECT SUM(cb.students_count)+SUM(cb.non_students_count)
							FROM companies_bookings AS cb
                            WHERE cb.conference_day_id = NEW.conference_day_id
                            GROUP BY cb.conference_day_id);
	
	SET PEOPLE_BOOKINGS = (SELECT COUNT(pb.id)
						   FROM people_bookings AS pb
                           WHERE pb.conference_day_id = NEW.conference_day_id AND NOT pb.is_canceled);
                           
	SET PARTICIPANTS_LIMIT = (SELECT cd.participants_limit
							  FROM conference_days AS cd
							  WHERE cd.id = NEW.conference_day_id);
                              
	IF PARTICIPANTS_LIMIT IS NOT NULL AND PARTICIPANTS_LIMIT <= COMPANY_BOOKINGS + PEOPLE_BOOKINGS THEN
		signal sqlstate '45000' set message_text = 'Conference day participants limit exceeded!';
	END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`companies_workshop_bookings_BEFORE_INSERT`
BEFORE INSERT ON `conferences`.`companies_workshop_bookings`
FOR EACH ROW
BEGIN
    DECLARE COMPANY_BOOKINGS INT;
    DECLARE PEOPLE_BOOKINGS INT;
    DECLARE PARTICIPANTS_LIMIT INT;
    
    SET COMPANY_BOOKINGS = (SELECT SUM(cwb.attenders_count)
							FROM companies_workshop_bookings AS cwb
                            JOIN companies_bookings AS cb ON cb.id = cwb.booking_id
                            WHERE cwb.workshop_id = NEW.workshop_id AND NOT cb.is_canceled
                            GROUP BY cwb.workshop_id);
	SET PEOPLE_BOOKINGS = (SELECT COUNT(wp.id)
						   FROM workshop_people AS wp
						   JOIN people_bookings AS pb ON pb.id = wp.booking_id
                           WHERE wp.workshop_id = NEW.workshop_id AND NOT pb.is_canceled);
	SET PARTICIPANTS_LIMIT = (SELECT w.participants_limit
							  FROM workshops AS w
							  WHERE w.id = NEW.workshop_id);
                              
	IF PARTICIPANTS_LIMIT IS NOT NULL AND PARTICIPANTS_LIMIT < COMPANY_BOOKINGS + PEOPLE_BOOKINGS + NEW.attenders_count THEN
		signal sqlstate '45000' set message_text = 'Workshop participants limit exceeded!';
	END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`companies_workshop_bookings_AFTER_INSERT`
AFTER INSERT ON `conferences`.`companies_workshop_bookings`
FOR EACH ROW
BEGIN
	DECLARE WORKSHOP_PRICE INT;
	SET WORKSHOP_PRICE = (SELECT w.price FROM workshops as w WHERE w.id = NEW.workshop_id);
	UPDATE companies_bookings SET total = total + WORKSHOP_PRICE * NEW.attenders_count WHERE id = NEW.booking_id;
END$$

USE `conferences`$$
CREATE DEFINER = CURRENT_USER TRIGGER `conferences`.`company_attenders_BEFORE_INSERT` BEFORE INSERT ON `company_attenders` FOR EACH ROW
BEGIN
IF email NOT LIKE '[a-zA-Z0-9_\-]+@([a-zA-Z0-9_\-]+\.)+(com|org|edu|nz|au)' THEN
		signal sqlstate '45000' set message_text = 'Wrong email pattern';
	END IF;
END$$

USE `conferences`$$
CREATE DEFINER = CURRENT_USER TRIGGER `conferences`.`people_BEFORE_INSERT` BEFORE INSERT ON `people` FOR EACH ROW
BEGIN
IF email NOT LIKE '[a-zA-Z0-9_\-]+@([a-zA-Z0-9_\-]+\.)+(com|org|edu|nz|au)' THEN
		signal sqlstate '45000' set message_text = 'Wrong email pattern';
	END IF;
    IF phone NOT LIKE '[+](\d[-\s]?){6,11}\d' THEN
		signal sqlstate '45000' set message_text = 'Wrong phone pattern';
	END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`people_bookings_BEFORE_INSERT`
BEFORE INSERT ON `conferences`.`people_bookings`
FOR EACH ROW
BEGIN
	DECLARE COMPANY_BOOKINGS INT;
    DECLARE PEOPLE_BOOKINGS INT;
    DECLARE PARTICIPANTS_LIMIT INT;
                            
	SET COMPANY_BOOKINGS = (SELECT SUM(cb.students_count)+SUM(cb.non_students_count)
							FROM companies_bookings AS cb
                            WHERE cb.conference_day_id = NEW.conference_day_id
                            GROUP BY cb.conference_day_id);
	
	SET PEOPLE_BOOKINGS = (SELECT COUNT(pb.id)
						   FROM people_bookings AS pb
                           WHERE pb.conference_day_id = NEW.conference_day_id AND NOT pb.is_canceled);
                           
	SET PARTICIPANTS_LIMIT = (SELECT cd.participants_limit
							  FROM conference_days AS cd
							  WHERE cd.id = NEW.conference_day_id);
                              
	IF PARTICIPANTS_LIMIT IS NOT NULL AND PARTICIPANTS_LIMIT <= COMPANY_BOOKINGS + PEOPLE_BOOKINGS THEN
		signal sqlstate '45000' set message_text = 'Conference day participants limit exceeded!';
	END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`price_levels_BEFORE_INSERT`
BEFORE INSERT ON `conferences`.`price_levels`
FOR EACH ROW
BEGIN
	IF EXISTS(SELECT pl.id FROM price_levels AS pl
			  WHERE pl.start_date < NEW.end_date AND pl.end_date > NEW.start_date AND pl.conference_id = NEW.conference_id)
	THEN
		signal sqlstate '45000' set message_text = 'Price level interval overlaps existing one!';
    END IF;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`workshop_people_AFTER_DELETE`
AFTER DELETE ON `conferences`.`workshop_people`
FOR EACH ROW
BEGIN
	DECLARE WORKSHOP_PRICE INT;
	SET WORKSHOP_PRICE = (SELECT w.price FROM workshops as w WHERE w.id = OLD.workshop_id);
	UPDATE people_bookings SET price = price - WORKSHOP_PRICE WHERE id = OLD.booking_id;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`workshop_people_AFTER_INSERT`
AFTER INSERT ON `conferences`.`workshop_people`
FOR EACH ROW
BEGIN
	DECLARE WORKSHOP_PRICE INT;
	SET WORKSHOP_PRICE = (SELECT w.price FROM workshops as w WHERE w.id = NEW.workshop_id);
	UPDATE people_bookings SET price = price + WORKSHOP_PRICE WHERE id = NEW.booking_id;
END$$

USE `conferences`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `conferences`.`workshop_people_BEFORE_INSERT`
BEFORE INSERT ON `conferences`.`workshop_people`
FOR EACH ROW
BEGIN
    DECLARE WORKSHOP_START TIME;
    DECLARE WORKSHOP_END TIME;
    DECLARE COMPANY_BOOKINGS INT;
    DECLARE PEOPLE_BOOKINGS INT;
    DECLARE PARTICIPANTS_LIMIT INT;

	IF NOT EXISTS(SELECT w.id FROM workshops AS w
				  JOIN people_bookings AS pb ON pb.conference_day_id = w.conference_day_id
				  WHERE w.id = NEW.workshop_id AND pb.id = NEW.booking_id)
	THEN
		signal sqlstate '45000' set message_text = 'Person is not attending workshop conference day!';
    END IF;
    
    SET COMPANY_BOOKINGS = (SELECT SUM(cwb.attenders_count)
							FROM companies_workshop_bookings AS cwb
                            JOIN companies_bookings AS cb ON cb.id = cwb.booking_id
                            WHERE cwb.workshop_id = NEW.workshop_id AND NOT cb.is_canceled
                            GROUP BY cwb.workshop_id);
	SET PEOPLE_BOOKINGS = (SELECT COUNT(wp.id)
						   FROM workshop_people AS wp
						   JOIN people_bookings AS pb ON pb.id = wp.booking_id
                           WHERE wp.workshop_id = NEW.workshop_id AND NOT pb.is_canceled);
	SET PARTICIPANTS_LIMIT = (SELECT w.participants_limit
							  FROM workshops AS w
							  WHERE w.id = NEW.workshop_id);
                              
	IF PARTICIPANTS_LIMIT IS NOT NULL AND PARTICIPANTS_LIMIT <= COMPANY_BOOKINGS + PEOPLE_BOOKINGS THEN
		signal sqlstate '45000' set message_text = 'Workshop participants limit exceeded!';
	END IF;
    
    
    SET WORKSHOP_START = (SELECT w.start FROM workshops as w WHERE w.id = NEW.workshop_id);
    SET WORKSHOP_END = (SELECT w.end FROM workshops as w WHERE w.id = NEW.workshop_id);
    
    IF EXISTS(SELECT w.id FROM workshops AS w
			  JOIN workshop_people AS wp ON w.id = wp.workshop_id
			  WHERE wp.person_id = NEW.person_id AND w.start < WORKSHOP_END AND w.end > WORKSHOP_START)
	THEN
		signal sqlstate '45000' set message_text = 'Person is attending different workshop at the same time!';
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
